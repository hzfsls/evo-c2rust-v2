{"#define CMPTLZ_ERROR_CONVERT(x) (int32_t)((CMPTLZ_MODULE << 16) | (uint32_t)(x))": "0", "#define CMPTLZ_HANDLE_CONVERT(x) (int32_t)((CMPTLZ_MODULE << 16) | ((uint32_t)(x) << 8))": "1", "#define CMPTLZ_LIKELY(expr) __builtin_expect(expr, true)": "2", "#define CMPTLZ_UNLIKELY(expr) __builtin_expect(expr, false)": "3", "#define CMPTLZ_LOG(error_code, fmt, ...)                                                                               \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        CmptlzLogWrite((size_t)(error_code), __FUNCTION__, __LINE__, fmt, __VA_ARGS__);                                \\\n    } while (0)": "4", "#define CMPTLZ_WRITE32BIT(ptr, val) (((CmptlzUnalignU32 *)(ptr))->v = (val))": "5", "#define CMPTLZ_READ32BIT(ptr) (((const CmptlzUnalignU32 *)(ptr))->v)": "6", "#define CMPTLZ_RANGE_UPDATE_AFTER_DEC_BIT0(range, rangeBound)                                                          \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        (range) = (rangeBound);                                                                                        \\\n    } while (0)": "7", "#define CMPTLZ_RANGE_UPDATE_AFTER_DEC_BIT1(range, rangeCode, rangeBound)                                               \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        (range) -= (rangeBound);                                                                                       \\\n        (rangeCode) -= (rangeBound);                                                                                   \\\n    } while (0)": "8", "#define CMPTLZ_RANGE_TRY_NORMALIZE(range, rangeCode, bufTryDec, bufLimit)                                              \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        if ((range) < CMPTLZ_RANGE_DOWN_LIMIT)                                                                         \\\n        {                                                                                                              \\\n            if ((bufTryDec) >= (bufLimit))                                                                             \\\n            {                                                                                                          \\\n                return CMPTLZ_DEC_INPUT_EOF;                                                                           \\\n            }                                                                                                          \\\n            (range) <<= CMPTLZ_ONE_BYTE_WIDTH;                                                                         \\\n            (rangeCode) <<= CMPTLZ_ONE_BYTE_WIDTH;                                                                     \\\n            (rangeCode) |= (*(bufTryDec)++);                                                                           \\\n        }                                                                                                              \\\n    } while (0)": "9", "#define CMPTLZ_SINGLE_BIT_TRY_DEC(range, rangeCode, rangeBound, decSym, probSym)                                       \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        (rangeBound) = ((range) >> CMPTLZ_PROB_LG_BIT) * (*(probSym));                                                 \\\n        if ((rangeCode) < (rangeBound))                                                                                \\\n        {                                                                                                              \\\n            CMPTLZ_RANGE_UPDATE_AFTER_DEC_BIT0(range, rangeBound);                                                     \\\n            (decSym) = ((decSym) << 1);                                                                                \\\n        }                                                                                                              \\\n        else                                                                                                           \\\n        {                                                                                                              \\\n            CMPTLZ_RANGE_UPDATE_AFTER_DEC_BIT1(range, rangeCode, rangeBound);                                          \\\n            (decSym) = ((decSym) << 1) + 1;                                                                            \\\n        }                                                                                                              \\\n    } while (0)": "10", "#define CMPTLZ_MATCH_BIT_TRY_DEC(range, rangeCode, rangeBound, decSym, probSym)                                        \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        (rangeBound) = ((range) >> CMPTLZ_PROB_LG_BIT) * (*(probSym));                                                 \\\n        if ((rangeCode) < (rangeBound))                                                                                \\\n        {                                                                                                              \\\n            CMPTLZ_RANGE_UPDATE_AFTER_DEC_BIT0(range, rangeBound);                                                     \\\n            (decSym) = ((decSym) << 1);                                                                                \\\n            (offset) ^= (bit);                                                                                         \\\n        }                                                                                                              \\\n        else                                                                                                           \\\n        {                                                                                                              \\\n            CMPTLZ_RANGE_UPDATE_AFTER_DEC_BIT1(range, rangeCode, rangeBound);                                          \\\n            (decSym) = ((decSym) << 1) + 1;                                                                            \\\n        }                                                                                                              \\\n    } while (0)": "11", "#define CMPTLZ_CALC_POS_STATE(procPos, pbMask) (((procPos) & (pbMask)) << 4)": "12", "#define CMPTLZ_RANGE_NORMALIZE(range, rangeCode, bufToDec)                                                             \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        if ((range) < CMPTLZ_RANGE_DOWN_LIMIT)                                                                         \\\n        {                                                                                                              \\\n            (range) <<= CMPTLZ_ONE_BYTE_WIDTH;                                                                         \\\n            (rangeCode) <<= CMPTLZ_ONE_BYTE_WIDTH;                                                                     \\\n            (rangeCode) |= (*(bufToDec)++);                                                                            \\\n        }                                                                                                              \\\n    } while (0)": "13", "#define CMPTLZ_IS_THE_BIT_0(probSlot, range, rangeCode, rangeBound)                                                    \\\n    (rangeBound) = (range >> CMPTLZ_PROB_LG_BIT) * (*(probSlot));                                                      \\\n    if ((rangeCode) < (rangeBound))": "14", "#define CMPTLZ_RANGE_UPDATE_0(prob, range, rangeBound)                                                                 \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        (range) = (rangeBound);                                                                                        \\\n        *(prob) = (CmptLzDecProb)((*(prob)) + ((CMPTLZ_PROB_LG - (*(prob))) >> CMPTLZ_RANGE_CODE_SIZE));               \\\n    } while (0)": "15", "#define CMPTLZ_RANGE_UPDATE_1(prob, range, rangeCode, rangeBound)                                                      \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        (range) -= (rangeBound);                                                                                       \\\n        (rangeCode) -= (rangeBound);                                                                                   \\\n        *(prob) = (CmptLzDecProb)((*(prob)) - ((*(prob)) >> CMPTLZ_RANGE_CODE_SIZE));                                  \\\n    } while (0)": "16", "#define CMPTLZ_NORMAL_BIT_DEC(probLit, range, rangeCode, rangeBound, decSym)                                           \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        (rangeBound) = ((range) >> CMPTLZ_PROB_LG_BIT) * (*(probLit));                                                 \\\n        if ((rangeCode) < (rangeBound))                                                                                \\\n        {                                                                                                              \\\n            CMPTLZ_RANGE_UPDATE_0(probLit, range, rangeBound);                                                         \\\n            (decSym) = ((decSym) << 1);                                                                                \\\n        }                                                                                                              \\\n        else                                                                                                           \\\n        {                                                                                                              \\\n            CMPTLZ_RANGE_UPDATE_1(probLit, range, rangeCode, rangeBound);                                              \\\n            (decSym) = ((decSym) << 1) + 1;                                                                            \\\n        }                                                                                                              \\\n    } while (0)": "17", "#define CMPTLZ_MATCH_BIT_DEC(probSlot, range, rangeCode, rangeBound, decSym, matchSym, offset, bit, bufToDec)          \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        (matchSym) <<= 1;                                                                                              \\\n        (bit) = (offset);                                                                                              \\\n        (offset) &= (matchSym);                                                                                        \\\n        (probLit) = (probSlot) + ((offset) + (bit) + (decSym));                                                        \\\n        (rangeBound) = ((range) >> CMPTLZ_PROB_LG_BIT) * (*(probLit));                                                 \\\n        if ((rangeCode) < (rangeBound))                                                                                \\\n        {                                                                                                              \\\n            CMPTLZ_RANGE_UPDATE_0(probLit, range, rangeBound);                                                         \\\n            (decSym) = ((decSym) << 1);                                                                                \\\n            (offset) ^= (bit);                                                                                         \\\n        }                                                                                                              \\\n        else                                                                                                           \\\n        {                                                                                                              \\\n            CMPTLZ_RANGE_UPDATE_1(probLit, range, rangeCode, rangeBound);                                              \\\n            (decSym) = ((decSym) << 1) + 1;                                                                            \\\n        }                                                                                                              \\\n        CMPTLZ_RANGE_NORMALIZE(range, rangeCode, bufToDec);                                                            \\\n    } while (0)": "18", "#define CMPTLZ_DIST_BIT_DEC(probDist, probSlot, range, rangeCode, rangeBound, decDist, decBit)                         \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        (probDist) = (probSlot) + (decDist);                                                                           \\\n        (rangeBound) = ((range) >> CMPTLZ_PROB_LG_BIT) * (*(probDist));                                                \\\n        if ((rangeCode) < (rangeBound))                                                                                \\\n        {                                                                                                              \\\n            CMPTLZ_RANGE_UPDATE_0(probDist, range, rangeBound);                                                        \\\n            (decDist) += (decBit);                                                                                     \\\n        }                                                                                                              \\\n        else                                                                                                           \\\n        {                                                                                                              \\\n            CMPTLZ_RANGE_UPDATE_1(probDist, range, rangeCode, rangeBound);                                             \\\n            (decDist) += (decBit) * 2;                                                                                 \\\n        }                                                                                                              \\\n    } while (0)": "19", "#define CMPTLZ_LEN_BIT_DEC(probSlot, range, rangeCode, rangeBound, decSym, bufToDec)                                   \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        CMPTLZ_NORMAL_BIT_DEC(probSlot, range, rangeCode, rangeBound, decSym);                                         \\\n        CMPTLZ_RANGE_NORMALIZE(range, rangeCode, bufToDec);                                                            \\\n    } while (0)": "20", "#define CMPTLZ_POSSLOT_BIT_DEC(probSlot, range, rangeCode, rangeBound, decSym, bufToDec)                               \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        CMPTLZ_NORMAL_BIT_DEC(probSlot, range, rangeCode, rangeBound, decSym);                                         \\\n        CMPTLZ_RANGE_NORMALIZE(range, rangeCode, bufToDec);                                                            \\\n    } while (0)": "21", "#define CMPTLZ_SET_DICTSIZE_BY_LEVEL(level, dictSize)                                                                  \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        dictSize = (level <= 5) ? (1 << (level * 2 + 14)) : ((level <= 7) ? (1 << 25) : (1 << 26));                    \\\n    } while (0)": "22", "#define CMPTLZ_SET_FB_BY_LEVEL(level, fastBytes) (fastBytes = ((level < 7) ? 32 : 64))": "23", "#define CMPT_LIT_SUBCODER(probs, litCtx, lpMask, pos, prevByte)                                                        \\\n    ((probs)[(((pos) & (lpMask)) << (litCtx)) + ((uint32_t)(prevByte) >> (8U - (litCtx)))])": "24", "#define CMPT_HASH_MASK_CALC(hashMask)                                                                                  \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        hashMask |= hashMask >> 1;                                                                                     \\\n        hashMask |= hashMask >> 2;                                                                                     \\\n        hashMask |= hashMask >> 4;                                                                                     \\\n        hashMask |= hashMask >> 8;                                                                                     \\\n        hashMask >>= 1;                                                                                                \\\n        hashMask |= 0xFFFF;                                                                                            \\\n        if (hashMask > (1 << 24))                                                                                      \\\n        {                                                                                                              \\\n            hashMask >>= 1;                                                                                            \\\n        }                                                                                                              \\\n    } while (0)": "25", "#define CMPT_HASH_4_CALC(mf, cur, temp, hash2Value, hash3Value, hashValue)                                             \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        temp = mf->hashRootTable[cur[0]] ^ cur[1];                                                                     \\\n        hash2Value = temp & CMPTLZ_HASH_2_MASK;                                                                        \\\n        hash3Value = (temp ^ ((uint32_t)(cur[2]) << 8)) & CMPTLZ_HASH_3_MASK;                                          \\\n        hashValue = (temp ^ ((uint32_t)(cur[2]) << 8) ^ (mf->hashRootTable[cur[3]] << 5)) & mf->hashMask;              \\\n    } while (0)": "26", "#define CMPT_HASH_UPDATE(mf, hash2Value, hash3Value, hashValue, pos)                                                   \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        mf->hash[hash2Value] = pos;                                                                                    \\\n        mf->hash[CMPTLZ_FIX_3_HASH + hash3Value] = pos;                                                                \\\n        mf->hash[CMPTLZ_FIX_4_HASH + hashValue] = pos;                                                                 \\\n    } while (0)": "27", "#define CMPT_HASH_FIND_2_BYTES(mf, delta2, longestLen, matchesCount, cur, matches)                                     \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        if (delta2 < mf->cycleSize && *(cur - delta2) == *cur)                                                         \\\n        {                                                                                                              \\\n            longestLen = CMPT_MF_MATCH_2_BYTES;                                                                        \\\n            matches[0].len = CMPT_MF_MATCH_2_BYTES;                                                                    \\\n            matches[0].dist = delta2 - 1;                                                                              \\\n            matchesCount = 1;                                                                                          \\\n        }                                                                                                              \\\n    } while (0)": "28", "#define CMPT_HASH_FIND_3_BYTES(mf, delta2, delta3, longestLen, matchesCount, cur, matches)                             \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        if (delta2 != delta3 && delta3 < mf->cycleSize && *(cur - delta3) == *cur)                                     \\\n        {                                                                                                              \\\n            longestLen = CMPT_MF_MATCH_3_BYTES;                                                                        \\\n            matches[matchesCount++].dist = delta3 - 1;                                                                 \\\n            delta2 = delta3;                                                                                           \\\n        }                                                                                                              \\\n    } while (0)": "29", "#define CMPT_MF_MOVE_POS(mf)                                                                                           \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        mf->readPos++;                                                                                                 \\\n        mf->cyclePos++;                                                                                                \\\n        mf->cyclePos = (mf->cyclePos == mf->cycleSize) ? 0 : mf->cyclePos;                                             \\\n        if (CMPTLZ_UNLIKELY(mf->readPos + mf->offset == CMPTLZ_UINT32_MAX))                                            \\\n        {                                                                                                              \\\n            CmptMfMovePos(mf);                                                                                         \\\n        }                                                                                                              \\\n    } while (0)": "30", "#define CMPT_MF_LEFT_SON_UPDATE(ptr1, pair, curMatch, len1, len)                                                       \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        *ptr1 = curMatch;                                                                                              \\\n        ptr1 = pair + 1;                                                                                               \\\n        curMatch = *ptr1;                                                                                              \\\n        len1 = len;                                                                                                    \\\n    } while (0)": "31", "#define CMPT_MF_RIGHT_SON_UPDATE(ptr0, pair, curMatch, len0, len)                                                      \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        *ptr0 = curMatch;                                                                                              \\\n        ptr0 = pair;                                                                                                   \\\n        curMatch = *ptr0;                                                                                              \\\n        len0 = len;                                                                                                    \\\n    } while (0)": "32", "#define CMPTLZ_FIND_MIN(x, y) ((x) < (y) ? (x) : (y))": "33", "#define CMPTLZ_FIND_MAX(x, y) ((x) > (y) ? (x) : (y))": "34", "#define NOT_EQUAL_2_BYTES(a, b) ((a)[0] != (b)[0] || (a)[1] != (b)[1])": "35", "#define CMPTLZ_RETURN_IF_NOT_OK(res)                                                                                   \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        if (CMPTLZ_UNLIKELY(res != CMPT_OK))                                                                           \\\n        {                                                                                                              \\\n            return res;                                                                                                \\\n        }                                                                                                              \\\n    } while (0)": "36", "#define CMPT_GET_DIST_STATE(len) (((len) < 4 + CMPTLZ_MATCH_LEN_MIN) ? (len) - CMPTLZ_MATCH_LEN_MIN : 4 - 1)": "37", "#define CMPT_STATE_UPDATE_WHEN_LIT(state)                                                                              \\\n    (state) = (((state) <= SHORTREP_LIT_LIT) ? LIT_LIT : (((state) <= LIT_SHORTREP) ? (state) - 3 : (state) - 6))": "38", "#define CMPT_STATE_UPDATE_WHEN_MATCH(state) (state) = (((state) < 7) ? LIT_MATCH : NOTLIT_MATCH)": "39", "#define CMPT_STATE_UPDATE_WHEN_LONGREP(state) (state) = (((state) < 7) ? LIT_LONGREP : NOTLIT_REP)": "40", "#define CMPT_STATE_UPDATE_WHEN_SHORTREP(state) (state) = (((state) < 7) ? LIT_SHORTREP : NOTLIT_REP)": "41", "#define GET_LEN_TO_POS_STATE(len) (((len) < CMPT_NUM_LEN_POS_STATE + 1) ? (len) - 2 : CMPT_NUM_LEN_POS_STATE - 1)": "42", "#define CMPT_RC_BREAK_CHECK(rcCtx, buf, res)                                                                           \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        if ((buf) == (rcCtx->bufBase + CMPTLZ_RC_BUFFER_SIZE))                                                         \\\n        {                                                                                                              \\\n            (res) = CmptRcFlush64Kb(rcCtx);                                                                            \\\n            CMPTLZ_RETURN_IF_NOT_OK(res);                                                                              \\\n        }                                                                                                              \\\n    } while (0)": "43", "#define CMPT_RC_BREAK_SHIFTING(rcCtx, buf, res)                                                                        \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        CMPT_RC_BREAK_CHECK(rcCtx, buf, res);                                                                          \\\n        if ((rcCtx)->cacheSize == 0)                                                                                   \\\n        {                                                                                                              \\\n            return CMPT_OK;                                                                                            \\\n        }                                                                                                              \\\n    } while (0)": "44", "#define CMPT_RC_NORMALIZE(rcCtx, range, shiftRes)                                                                      \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        if ((range) < CMPT_RC_MIN_RANGE)                                                                               \\\n        {                                                                                                              \\\n            (range) <<= 8;                                                                                             \\\n            (shiftRes) = CmptRcShiftLow(rcCtx);                                                                        \\\n        }                                                                                                              \\\n    } while (0)": "45", "#define CMPT_RC_GET_NEWBOUND(prob, bit0Prob, range, newBound)                                                          \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        (bit0Prob) = *(prob);                                                                                          \\\n        newBound = ((range) >> 11) * (bit0Prob);                                                                       \\\n    } while (0)": "46", "#define CMPT_RC_BIT_PROCESS(rcCtx, prob, bit, bit0Prob, range, newBound, shiftRes)                                     \\\n    {                                                                                                                  \\\n        do                                                                                                             \\\n        {                                                                                                              \\\n            uint32_t mask = 0 - (uint32_t)(bit);                                                                       \\\n            CMPT_RC_GET_NEWBOUND(prob, bit0Prob, range, newBound);                                                     \\\n            (range) &= mask;                                                                                           \\\n            mask &= (newBound);                                                                                        \\\n            (range) -= mask;                                                                                           \\\n            (rcCtx)->low += mask;                                                                                      \\\n            mask = (uint32_t)(bit) - 1;                                                                                \\\n            (range) += (newBound) & mask;                                                                              \\\n            mask &= (CMPTLZ_PROB_MAX_NUM - ((1 << 5) - 1));                                                            \\\n            mask += ((1 << 5) - 1);                                                                                    \\\n            (bit0Prob) += (int)(mask - (bit0Prob)) >> 5;                                                               \\\n            *(prob) = (CmptlzProb)(bit0Prob);                                                                          \\\n            CMPT_RC_NORMALIZE(rcCtx, range, shiftRes);                                                                 \\\n        } while (0);                                                                                                   \\\n    }": "47", "#define CMPT_RC_BIT_0(prob, newBound, range, bit0Prob)                                                                 \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        (range) = (newBound);                                                                                          \\\n        *(prob) = (CmptlzProb)((bit0Prob) + ((CMPTLZ_PROB_MAX_NUM - (bit0Prob)) >> 5));                                \\\n    } while (0)": "48", "#define CMPT_RC_BIT_1(rcCtx, prob, newBound, range, bit0Prob)                                                          \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        (range) -= (newBound);                                                                                         \\\n        (rcCtx)->low += (newBound);                                                                                    \\\n        *(prob) = (CmptlzProb)((bit0Prob) - ((bit0Prob) >> 5));                                                        \\\n    } while (0)": "49", "#define CMPT_RC_BIT_0_PROCESS(rcCtx, prob, newBound, range, bit0Prob, shiftRes)                                        \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        CMPT_RC_BIT_0(prob, newBound, range, bit0Prob);                                                                \\\n        CMPT_RC_NORMALIZE(rcCtx, range, shiftRes);                                                                     \\\n    } while (0)": "50", "#define CMPT_RC_BIT_1_PROCESS(rcCtx, prob, newBound, range, bit0Prob, shiftRes)                                        \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        CMPT_RC_BIT_1(rcCtx, prob, newBound, range, bit0Prob);                                                         \\\n        CMPT_RC_NORMALIZE(rcCtx, range, shiftRes);                                                                     \\\n    } while (0)": "51", "#define CMPT_LIT_PROB_GET(encCtx, litProb, pos, prevByte)                                                              \\\n    (litProb + (uint32_t)3 * (((((pos) << 8) + (prevByte)) & encCtx->lpMask) << encCtx->litMarcov.lcBits))": "52"}