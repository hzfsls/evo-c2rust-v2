{"#define VOS_AVL_INIT_TREE(TREE, COMPARE)                                                                               \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        (TREE).pfnCompare = (COMPARE);                                                                                 \\\n        (TREE).pstFirst = (AVL_NODE *)AVL_NULL_PTR;                                                                    \\\n        (TREE).pstLast = (AVL_NODE *)AVL_NULL_PTR;                                                                     \\\n        (TREE).pstRoot = (AVL_NODE *)AVL_NULL_PTR;                                                                     \\\n    } while (0)": "0", "#define VOS_AVL_INIT_NODE(NODE, SELF, KEY)                                                                             \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        (NODE).pstParent = (AVL_NODE *)AVL_NULL_PTR;                                                                   \\\n        (NODE).pstLeft = (AVL_NODE *)AVL_NULL_PTR;                                                                     \\\n        (NODE).pstRight = (AVL_NODE *)AVL_NULL_PTR;                                                                    \\\n        (NODE).pSelf = (SELF);                                                                                         \\\n        (NODE).pKey = (KEY);                                                                                           \\\n        (NODE).sLHeight = -1;                                                                                          \\\n        (NODE).sRHeight = -1;                                                                                          \\\n    } while (0)": "1", "#define VOS_AVL_INSERT(TREE, NODE) (VOS_AVL_Insert_Or_Find(&(TREE), &(NODE)) == AVL_NULL_PTR)": "2", "#define VOS_AVL_DELETE(TREE, NODE) VOS_AVL_Delete(&(TREE), &(NODE))": "3", "#define VOS_AVL_FIND(TREE, KEY) VOS_AVL_Find(&(TREE), (KEY))": "4", "#define VOS_AVL_IN_TREE(NODE) (((NODE).sLHeight != -1) && ((NODE).sRHeight != -1))": "5", "#define VOS_AVL_FIND_OR_FIND_NEXT(TREE, KEY) VOS_AVL_Find_Or_Find_Next(&(TREE), (KEY), AVL_FALSE)": "6", "#define VOS_V2_AVL_MAX(X, Y) (((X) > (Y)) ? (X) : (Y))": "7", "#define VOS_AVL3_INIT_TREE(TREE, TREE_INFO)                                                                            \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        (TREE).pstFirst = (AVL3_NODE *)AVL_NULL_PTR;                                                                   \\\n        (TREE).pstLast = (AVL3_NODE *)AVL_NULL_PTR;                                                                    \\\n        (TREE).pstRoot = (AVL3_NODE *)AVL_NULL_PTR;                                                                    \\\n    } while (0)": "8", "#define VOS_AVL3_INIT_NODE(NODE)                                                                                       \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        (NODE).pstParent = (AVL3_NODE *)AVL_NULL_PTR;                                                                  \\\n        (NODE).pstLeft = (AVL3_NODE *)AVL_NULL_PTR;                                                                    \\\n        (NODE).pstRight = (AVL3_NODE *)AVL_NULL_PTR;                                                                   \\\n        (NODE).sLHeight = -1;                                                                                          \\\n        (NODE).sRHeight = -1;                                                                                          \\\n    } while (0)": "9", "#define VOS_AVL3_INSERT(TREE, NODE, TREE_INFO) (AVL_NULL_PTR == VOS_AVL3_Insert_Or_Find(&(TREE), &(NODE), &(TREE_INFO)))": "10", "#define VOS_AVL3_INSERT_OR_FIND(TREE, NODE, TREE_INFO) VOS_AVL3_Insert_Or_Find(&(TREE), &(NODE), &(TREE_INFO))": "11", "#define VOS_AVL3_DELETE(TREE, NODE) VOS_AVL3_Delete(&(TREE), &(NODE))": "12", "#define VOS_AVL3_FIND(TREE, KEY, TREE_INFO) VOS_AVL3_Find(&(TREE), (KEY), &(TREE_INFO))": "13", "#define VOS_AVL3_NEXT(NODE, TREE_INFO) VOS_AVL3_Next(&(NODE), &(TREE_INFO))": "14", "#define VOS_AVL3_PREV(NODE, TREE_INFO) VOS_AVL3_Prev(&(NODE), &(TREE_INFO))": "15", "#define VOS_AVL3_FIRST(TREE, TREE_INFO) VOS_AVL3_First(&(TREE), &(TREE_INFO))": "16", "#define VOS_AVL3_LAST(TREE, TREE_INFO) VOS_AVL3_Last(&(TREE), &(TREE_INFO))": "17", "#define VOS_AVL3_IN_TREE(NODE) (((NODE).sLHeight != -1) && ((NODE).sRHeight != -1))": "18", "#define VOS_AVL3_FIND_NEXT(TREE, KEY, TREE_INFO) AVL3_Find_Or_Find_Next(&(TREE), (KEY), AVL_TRUE, &(TREE_INFO))": "19", "#define VOS_AVL3_FIND_OR_FIND_NEXT(TREE, KEY, TREE_INFO) AVL3_Find_Or_Find_Next(&(TREE), (KEY), AVL_FALSE, &(TREE_INFO))": "20", "#define TREE_OR_TREEINFO_IS_NULL(pstTree, pstTreeInfo) (((pstTree) == AVL_NULL_PTR) || ((pstTreeInfo) == AVL_NULL_PTR))": "21", "#define GET_NODE_START_ADDRESS(pstNode, usOffset)                                                                      \\\n    (((pstNode) != AVL_NULL_PTR) ? (void *)((unsigned char *)(pstNode) - (usOffset)) : AVL_NULL_PTR)": "22", "#define GET_KEYOFFSET(pstTreeInfo) ((int)((pstTreeInfo)->usKeyOffset - (pstTreeInfo)->usNodeOffset))": "23", "#define FIND_LEFTMOST_NODE(pstNode)                                                                                    \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        while ((pstNode)->pstLeft != AVL_NULL_PTR)                                                                     \\\n        {                                                                                                              \\\n            (pstNode) = (pstNode)->pstLeft;                                                                            \\\n        }                                                                                                              \\\n    } while (0)": "24", "#define FIND_RIGHTMOST_NODE(pstNode)                                                                                   \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        while ((pstNode)->pstRight != AVL_NULL_PTR)                                                                    \\\n        {                                                                                                              \\\n            (pstNode) = (pstNode)->pstRight;                                                                           \\\n        }                                                                                                              \\\n    } while (0)": "25"}