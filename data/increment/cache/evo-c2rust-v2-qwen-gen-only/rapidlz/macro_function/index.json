{"#define RAPIDLZ_RETURN_IF_NOT_TRUE(condition, errCode)                                                                 \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        if (!condition)                                                                                                \\\n        {                                                                                                              \\\n            RAPIDLZ_LOG(errCode, \" \");                                                                                 \\\n            return errCode;                                                                                            \\\n        }                                                                                                              \\\n    } while (0)": "0", "#define RAPIDLZ_RETURN_IF_NOT_EOK(condition, errCode)                                                                  \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        if (condition != EOK)                                                                                          \\\n        {                                                                                                              \\\n            RAPIDLZ_LOG(errCode, \" \");                                                                                 \\\n            return errCode;                                                                                            \\\n        }                                                                                                              \\\n    } while (0)": "1", "#define RAPIDLZ_POSITION_UPDATE(curSrc, curDest, len)                                                                  \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        curDest += len;                                                                                                \\\n        curSrc += len;                                                                                                 \\\n    } while (0)": "2", "#define RAPIDLZ_SAFE_LIT_COPY(curSrc, leftSrcSize, curDest, destEnd, litLen)                                           \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        if (RAPIDLZ_UNLIKELY(litLen > leftSrcSize || memmove_s(curDest, destEnd - curDest, curSrc, litLen) != EOK))    \\\n        {                                                                                                              \\\n            RAPIDLZ_LOG(RAPIDLZ_DST_SIZE_SMALL, \"litLen:%u dstEnd - dst:%zu\\n\", litLen, leftSrcSize);                  \\\n            return RAPIDLZ_ERROR_OUTPUT;                                                                               \\\n        }                                                                                                              \\\n    } while (0)": "3", "#define RAPIDLZ_SAFE_COPY_TILL_END(curSrc, leftSrcSize, curDest, destEnd, len)                                         \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        RAPIDLZ_SAFE_LIT_COPY(curSrc, leftSrcSize, curDest, destEnd, len);                                             \\\n        RAPIDLZ_POSITION_UPDATE(curSrc, curDest, len);                                                                 \\\n        if (leftSrcSize == len)                                                                                        \\\n        {                                                                                                              \\\n            return curDest - (uint8_t *)(dest);                                                                        \\\n        }                                                                                                              \\\n    } while (0)": "4", "#define RAPIDLZ_FAST_SAFE_COPY_BY_BYTES(curDest, matchSrc, len)                                                        \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        while ((len) > 2)                                                                                              \\\n        {                                                                                                              \\\n            *(curDest)++ = *(matchSrc)++;                                                                              \\\n            *(curDest)++ = *(matchSrc)++;                                                                              \\\n            *(curDest)++ = *(matchSrc)++;                                                                              \\\n            (len) -= 3;                                                                                                \\\n        }                                                                                                              \\\n        if ((len) > 0)                                                                                                 \\\n        {                                                                                                              \\\n            *(curDest)++ = *(matchSrc)++;                                                                              \\\n            if ((len) > 1)                                                                                             \\\n            {                                                                                                          \\\n                *(curDest)++ = *(matchSrc)++;                                                                          \\\n            }                                                                                                          \\\n        }                                                                                                              \\\n    } while (0)": "5", "#define RAPIDLZ_LITERAL_LEN_COPY_END(curDest, len)                                                                     \\\n    ((curDest) + (len) + 1 + (((len) + RAPIDLZ_MAX_BYTE_VALUE - RAPIDLZ_MAX_4BIT_VALUE) / RAPIDLZ_MAX_BYTE_VALUE))": "6", "#define RAPIDLZ_LIT_AND_MATCH_COPY_END(curDest, matchLen)                                                              \\\n    (curDest) + (1 + RAPIDLZ_LAST_LITERALS) + ((matchLen + 240) / RAPIDLZ_MAX_BYTE_VALUE)": "7", "#define RAPIDLZ_CONTINUE_IF_NOT_A_MATCH(matchOffset, prefixDictLimit, current)                                         \\\n    if (((matchOffset) < (prefixDictLimit)) || ((matchOffset) + RAPIDLZ_MAX_OFFSET < (current)))                       \\\n    {                                                                                                                  \\\n        continue;                                                                                                      \\\n    }": "8", "#define RAPIDLZ_DICT_FAST_COPY_AVAIL(curSrc, len, srcEndFast, curDest, destEndFast)                                    \\\n    (((curSrc) + (len) <= (srcEndFast)) && ((curDest) + (len) <= (destEndFast)))": "9", "#define RAPIDLZ_GET_MATCH_LEN(len, curSrc, srcEnd, temp)                                                               \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        if ((len) < RAPIDLZ_MAX_4BIT_VALUE)                                                                            \\\n        {                                                                                                              \\\n            (len) += 4;                                                                                                \\\n        }                                                                                                              \\\n        else                                                                                                           \\\n        {                                                                                                              \\\n            RAPIDLZ_READ_OPTIONAL_LENGTH((len), (curSrc), (srcEnd), (temp));                                           \\\n            (len) += 4;                                                                                                \\\n        }                                                                                                              \\\n    } while (0)": "10", "#define RAPIDLZ_LIKELY(x) (__builtin_expect(!!(x), 1))": "11", "#define RAPIDLZ_UNLIKELY(x) (__builtin_expect(!!(x), 0))": "12", "#define RAPIDLZ_READ16BIT(ptr) (((const RapidlzUnalignU16 *)(ptr))->v)": "13", "#define RAPIDLZ_READ32BIT(ptr) (((const RapidlzUnalignU32 *)(ptr))->v)": "14", "#define RAPIDLZ_READ64BIT(ptr) (((const RapidlzUnalignU64 *)(ptr))->v)": "15", "#define RAPIDLZ_WRITE64BIT(ptr, val) (((RapidlzUnalignU64 *)(ptr))->v = (val))": "16", "#define RAPIDLZ_ASSERT(x) assert(x)": "17", "#define RAPIDLZ_EXPAND_FORWARD(srcBegin, matchBegin, srcCurr, srcAnchor)                                               \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        while ((srcBegin) < (matchBegin) && (srcCurr) > (srcAnchor) &&                                                 \\\n               RAPIDLZ_UNLIKELY((matchBegin)[-1] == (srcCurr)[-1]))                                                    \\\n        {                                                                                                              \\\n            (matchBegin)--;                                                                                            \\\n            (srcCurr)--;                                                                                               \\\n        }                                                                                                              \\\n    } while (0)": "18", "#define RAPIDLZ_READ_OPTIONAL_LENGTH(len, srcCurr, srcEnd, temp)                                                       \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        if (RAPIDLZ_LIKELY((srcCurr) < (srcEnd)))                                                                      \\\n        {                                                                                                              \\\n            (temp) = *(srcCurr)++;                                                                                     \\\n            (len) += (temp);                                                                                           \\\n        }                                                                                                              \\\n        while (((temp) == RAPIDLZ_MAX_BYTE_VALUE) && (srcCurr) < (srcEnd))                                             \\\n        {                                                                                                              \\\n            (temp) = *(srcCurr)++;                                                                                     \\\n            (len) += (temp);                                                                                           \\\n        }                                                                                                              \\\n    } while (0)": "19", "#define SAFE_COPY_MATCH(dstCurr, matchSrc, matchLength)                                                                \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        while ((matchLength)-- > 0)                                                                                    \\\n        {                                                                                                              \\\n            *(dstCurr)++ = *(matchSrc)++;                                                                              \\\n        }                                                                                                              \\\n    } while (0)": "20", "#define RAPIDLZ_COMPRESSBOUND(size) ((uint32_t)(size) > RAPIDLZ_MAX_INPUT_SIZE ? 0 : (size) + ((size) / 255) + 16)": "21", "#define RAPIDLZ_LOG(error_code, fmt, ...)                                                                              \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        RapidlzLogWrite((size_t)(error_code), RAPIDLZFILENAME, __LINE__, fmt, __VA_ARGS__);                            \\\n    } while (0)": "22"}