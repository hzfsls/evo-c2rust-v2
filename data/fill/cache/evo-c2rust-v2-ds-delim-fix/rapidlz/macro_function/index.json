{"#define RAPIDLZ_LOG(error_code, fmt, ...)                                                                              \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        RapidlzLogWrite((size_t)(error_code), RAPIDLZFILENAME, __LINE__, fmt, __VA_ARGS__);                            \\\n    } while (0)": "0", "#define RAPIDLZ_LIKELY(x) (__builtin_expect(!!(x), 1))": "1", "#define RAPIDLZ_UNLIKELY(x) (__builtin_expect(!!(x), 0))": "2", "#define RAPIDLZ_READ16BIT(ptr) (((const RapidlzUnalignU16 *)(ptr))->v)": "3", "#define RAPIDLZ_READ32BIT(ptr) (((const RapidlzUnalignU32 *)(ptr))->v)": "4", "#define RAPIDLZ_READ64BIT(ptr) (((const RapidlzUnalignU64 *)(ptr))->v)": "5", "#define RAPIDLZ_WRITE64BIT(ptr, val) (((RapidlzUnalignU64 *)(ptr))->v = (val))": "6", "#define RAPIDLZ_ASSERT(x) assert(x)": "7", "#define RAPIDLZ_EXPAND_FORWARD(srcBegin, matchBegin, srcCurr, srcAnchor)                                               \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        while ((srcBegin) < (matchBegin) && (srcCurr) > (srcAnchor) &&                                                 \\\n               RAPIDLZ_UNLIKELY((matchBegin)[-1] == (srcCurr)[-1]))                                                    \\\n        {                                                                                                              \\\n            (matchBegin)--;                                                                                            \\\n            (srcCurr)--;                                                                                               \\\n        }                                                                                                              \\\n    } while (0)": "8", "#define RAPIDLZ_READ_OPTIONAL_LENGTH(len, srcCurr, srcEnd, temp)                                                       \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        if (RAPIDLZ_LIKELY((srcCurr) < (srcEnd)))                                                                      \\\n        {                                                                                                              \\\n            (temp) = *(srcCurr)++;                                                                                     \\\n            (len) += (temp);                                                                                           \\\n        }                                                                                                              \\\n        while (((temp) == RAPIDLZ_MAX_BYTE_VALUE) && (srcCurr) < (srcEnd))                                             \\\n        {                                                                                                              \\\n            (temp) = *(srcCurr)++;                                                                                     \\\n            (len) += (temp);                                                                                           \\\n        }                                                                                                              \\\n    } while (0)": "9", "#define SAFE_COPY_MATCH(dstCurr, matchSrc, matchLength)                                                                \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        while ((matchLength)-- > 0)                                                                                    \\\n        {                                                                                                              \\\n            *(dstCurr)++ = *(matchSrc)++;                                                                              \\\n        }                                                                                                              \\\n    } while (0)": "10", "#define RAPIDLZ_COMPRESSBOUND(size) ((uint32_t)(size) > RAPIDLZ_MAX_INPUT_SIZE ? 0 : (size) + ((size) / 255) + 16)": "11"}