{
    "src/md5.c": {
        "includes": [],
        "macros": [
            "#define MD5_DIGEST_LEN 16",
            "#define MD5_INPUT_LEN_MAX 0xffffffffffffffffLL",
            "#define MD5_BUFFER_SIZE 64",
            "#define MD5_TEXT_IN_BUFFER_MAX 56"
        ],
        "macro_functions": [
            "#define MD5_LINEAR_FUNC_F(B, C, D) (((B) & (C)) | ((~(B)) & (D)))",
            "#define MD5_LINEAR_FUNC_G(B, C, D) (((B) & (D)) | ((C) & (~(D))))",
            "#define MD5_LINEAR_FUNC_H(B, C, D) ((B) ^ (C) ^ (D))",
            "#define MD5_LINEAR_FUNC_I(B, C, D) ((C) ^ ((B) | (~(D))))",
            "#define MD5_RECORD_MESSAGE_LEN(context)                                                                                \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        uint32_t __i;                                                                                                  \\\n        for (__i = 0; __i < sizeof((context)->aulCount) / sizeof((context)->aulCount[0]); __i++)                       \\\n        {                                                                                                              \\\n            (context)->aucBuffer[(context)->uiPos] = (uint8_t)((context)->aulCount[__i] & 0xff);                       \\\n            (context)->uiPos++;                                                                                        \\\n            (context)->aucBuffer[(context)->uiPos] = (uint8_t)(((context)->aulCount[__i] >> 8) & 0xff);                \\\n            (context)->uiPos++;                                                                                        \\\n            (context)->aucBuffer[(context)->uiPos] = (uint8_t)(((context)->aulCount[__i] >> 16) & 0xff);               \\\n            (context)->uiPos++;                                                                                        \\\n            (context)->aucBuffer[(context)->uiPos] = (uint8_t)(((context)->aulCount[__i] >> 24) & 0xff);               \\\n            (context)->uiPos++;                                                                                        \\\n        }                                                                                                              \\\n    } while (0)",
            "#define MD5_COMPOSE_DIGEST(digest, md5State)                                                                           \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        uint32_t __i = 0;                                                                                              \\\n        uint32_t __j = 0;                                                                                              \\\n        for (; __i < sizeof((md5State)) / sizeof((md5State)[0]); __i++)                                                \\\n        {                                                                                                              \\\n            (digest)[__j] = (uint8_t)(md5State)[__i];                                                                  \\\n            __j++;                                                                                                     \\\n            (digest)[__j] = (uint8_t)((md5State)[__i] >> 8);                                                           \\\n            __j++;                                                                                                     \\\n            (digest)[__j] = (uint8_t)((md5State)[__i] >> 16);                                                          \\\n            __j++;                                                                                                     \\\n            (digest)[__j] = (uint8_t)((md5State)[__i] >> 24);                                                          \\\n            __j++;                                                                                                     \\\n        }                                                                                                              \\\n    } while (0)",
            "#define MD5_CYCLE_MOVE(numMoved, moveBit)                                                                              \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        uint32_t __tmpValue;                                                                                           \\\n        __tmpValue = (numMoved) >> (32 - (moveBit));                                                                   \\\n        (numMoved) = (numMoved) << (moveBit);                                                                          \\\n        (numMoved) += __tmpValue;                                                                                      \\\n    } while (0)",
            "#define MD5_CHANGE_STATE_IN_TURN(state, value)                                                                         \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        (state)[0] = (state)[3];                                                                                       \\\n        (state)[3] = (state)[2];                                                                                       \\\n        (state)[2] = (state)[1];                                                                                       \\\n        (state)[1] = (state)[1] + (value);                                                                             \\\n    } while (0)",
            "#define MD5_FUNC_F(value, md5State, text, addEnd, moveBit)                                                             \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        (value) = MD5_LINEAR_FUNC_F((md5State)[1], (md5State)[2], (md5State)[3]) + (md5State)[0] + (text) + (addEnd);  \\\n        MD5_CYCLE_MOVE((value), (moveBit));                                                                            \\\n        MD5_CHANGE_STATE_IN_TURN((md5State), (value));                                                                 \\\n    } while (0)",
            "#define MD5_FUNC_G(value, md5State, text, addEnd, moveBit)                                                             \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        (value) = MD5_LINEAR_FUNC_G((md5State)[1], (md5State)[2], (md5State)[3]) + (md5State)[0] + (text) + (addEnd);  \\\n        MD5_CYCLE_MOVE((value), (moveBit));                                                                            \\\n        MD5_CHANGE_STATE_IN_TURN((md5State), (value));                                                                 \\\n    } while (0)",
            "#define MD5_FUNC_H(value, md5State, text, addEnd, moveBit)                                                             \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        (value) = MD5_LINEAR_FUNC_H((md5State)[1], (md5State)[2], (md5State)[3]) + (md5State)[0] + (text) + (addEnd);  \\\n        MD5_CYCLE_MOVE((value), (moveBit));                                                                            \\\n        MD5_CHANGE_STATE_IN_TURN((md5State), (value));                                                                 \\\n    } while (0)",
            "#define MD5_FUNC_I(value, md5State, text, addEnd, moveBit)                                                             \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        (value) = MD5_LINEAR_FUNC_I((md5State)[1], (md5State)[2], (md5State)[3]) + (md5State)[0] + (text) + (addEnd);  \\\n        MD5_CYCLE_MOVE((value), (moveBit));                                                                            \\\n        MD5_CHANGE_STATE_IN_TURN((md5State), (value));                                                                 \\\n    } while (0)",
            "#define MD5_F_PROC(tmpValue, tmpState, textFragment)                                                                   \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        MD5_FUNC_F((tmpValue), (tmpState), (textFragment)[0], 0xd76aa478, 7);                                          \\\n        MD5_FUNC_F((tmpValue), (tmpState), (textFragment)[1], 0xe8c7b756, 12);                                         \\\n        MD5_FUNC_F((tmpValue), (tmpState), (textFragment)[2], 0x242070db, 17);                                         \\\n        MD5_FUNC_F((tmpValue), (tmpState), (textFragment)[3], 0xc1bdceee, 22);                                         \\\n        MD5_FUNC_F((tmpValue), (tmpState), (textFragment)[4], 0xf57c0faf, 7);                                          \\\n        MD5_FUNC_F((tmpValue), (tmpState), (textFragment)[5], 0x4787c62a, 12);                                         \\\n        MD5_FUNC_F((tmpValue), (tmpState), (textFragment)[6], 0xa8304613, 17);                                         \\\n        MD5_FUNC_F((tmpValue), (tmpState), (textFragment)[7], 0xfd469501, 22);                                         \\\n        MD5_FUNC_F((tmpValue), (tmpState), (textFragment)[8], 0x698098d8, 7);                                          \\\n        MD5_FUNC_F((tmpValue), (tmpState), (textFragment)[9], 0x8b44f7af, 12);                                         \\\n        MD5_FUNC_F((tmpValue), (tmpState), (textFragment)[10], 0xffff5bb1, 17);                                        \\\n        MD5_FUNC_F((tmpValue), (tmpState), (textFragment)[11], 0x895cd7be, 22);                                        \\\n        MD5_FUNC_F((tmpValue), (tmpState), (textFragment)[12], 0x6b901122, 7);                                         \\\n        MD5_FUNC_F((tmpValue), (tmpState), (textFragment)[13], 0xfd987193, 12);                                        \\\n        MD5_FUNC_F((tmpValue), (tmpState), (textFragment)[14], 0xa679438e, 17);                                        \\\n        MD5_FUNC_F((tmpValue), (tmpState), (textFragment)[15], 0x49b40821, 22);                                        \\\n    } while (0)",
            "#define MD5_G_PROC(tmpValue, tmpState, textFragment)                                                                   \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        MD5_FUNC_G((tmpValue), (tmpState), (textFragment)[1], 0xf61e2562, 5);                                          \\\n        MD5_FUNC_G((tmpValue), (tmpState), (textFragment)[6], 0xc040b340, 9);                                          \\\n        MD5_FUNC_G((tmpValue), (tmpState), (textFragment)[11], 0x265e5a51, 14);                                        \\\n        MD5_FUNC_G((tmpValue), (tmpState), (textFragment)[0], 0xe9b6c7aa, 20);                                         \\\n        MD5_FUNC_G((tmpValue), (tmpState), (textFragment)[5], 0xd62f105d, 5);                                          \\\n        MD5_FUNC_G((tmpValue), (tmpState), (textFragment)[10], 0x02441453, 9);                                         \\\n        MD5_FUNC_G((tmpValue), (tmpState), (textFragment)[15], 0xd8a1e681, 14);                                        \\\n        MD5_FUNC_G((tmpValue), (tmpState), (textFragment)[4], 0xe7d3fbc8, 20);                                         \\\n        MD5_FUNC_G((tmpValue), (tmpState), (textFragment)[9], 0x21e1cde6, 5);                                          \\\n        MD5_FUNC_G((tmpValue), (tmpState), (textFragment)[14], 0xc33707d6, 9);                                         \\\n        MD5_FUNC_G((tmpValue), (tmpState), (textFragment)[3], 0xf4d50d87, 14);                                         \\\n        MD5_FUNC_G((tmpValue), (tmpState), (textFragment)[8], 0x455a14ed, 20);                                         \\\n        MD5_FUNC_G((tmpValue), (tmpState), (textFragment)[13], 0xa9e3e905, 5);                                         \\\n        MD5_FUNC_G((tmpValue), (tmpState), (textFragment)[2], 0xfcefa3f8, 9);                                          \\\n        MD5_FUNC_G((tmpValue), (tmpState), (textFragment)[7], 0x676f02d9, 14);                                         \\\n        MD5_FUNC_G((tmpValue), (tmpState), (textFragment)[12], 0x8d2a4c8a, 20);                                        \\\n    } while (0)",
            "#define MD5_H_PROC(tmpValue, tmpState, textFragment)                                                                   \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        MD5_FUNC_H((tmpValue), (tmpState), (textFragment)[5], 0xfffa3942, 4);                                          \\\n        MD5_FUNC_H((tmpValue), (tmpState), (textFragment)[8], 0x8771f681, 11);                                         \\\n        MD5_FUNC_H((tmpValue), (tmpState), (textFragment)[11], 0x6d9d6122, 16);                                        \\\n        MD5_FUNC_H((tmpValue), (tmpState), (textFragment)[14], 0xfde5380c, 23);                                        \\\n        MD5_FUNC_H((tmpValue), (tmpState), (textFragment)[1], 0xa4beea44, 4);                                          \\\n        MD5_FUNC_H((tmpValue), (tmpState), (textFragment)[4], 0x4bdecfa9, 11);                                         \\\n        MD5_FUNC_H((tmpValue), (tmpState), (textFragment)[7], 0xf6bb4b60, 16);                                         \\\n        MD5_FUNC_H((tmpValue), (tmpState), (textFragment)[10], 0xbebfbc70, 23);                                        \\\n        MD5_FUNC_H((tmpValue), (tmpState), (textFragment)[13], 0x289b7ec6, 4);                                         \\\n        MD5_FUNC_H((tmpValue), (tmpState), (textFragment)[0], 0xeaa127fa, 11);                                         \\\n        MD5_FUNC_H((tmpValue), (tmpState), (textFragment)[3], 0xd4ef3085, 16);                                         \\\n        MD5_FUNC_H((tmpValue), (tmpState), (textFragment)[6], 0x04881d05, 23);                                         \\\n        MD5_FUNC_H((tmpValue), (tmpState), (textFragment)[9], 0xd9d4d039, 4);                                          \\\n        MD5_FUNC_H((tmpValue), (tmpState), (textFragment)[12], 0xe6db99e5, 11);                                        \\\n        MD5_FUNC_H((tmpValue), (tmpState), (textFragment)[15], 0x1fa27cf8, 16);                                        \\\n        MD5_FUNC_H((tmpValue), (tmpState), (textFragment)[2], 0xc4ac5665, 23);                                         \\\n    } while (0)",
            "#define MD5_I_PROC(tmpValue, tmpState, textFragment)                                                                   \\\n    do                                                                                                                 \\\n    {                                                                                                                  \\\n        MD5_FUNC_I((tmpValue), (tmpState), (textFragment)[0], 0xf4292244, 6);                                          \\\n        MD5_FUNC_I((tmpValue), (tmpState), (textFragment)[7], 0x432aff97, 10);                                         \\\n        MD5_FUNC_I((tmpValue), (tmpState), (textFragment)[14], 0xab9423a7, 15);                                        \\\n        MD5_FUNC_I((tmpValue), (tmpState), (textFragment)[5], 0xfc93a039, 21);                                         \\\n        MD5_FUNC_I((tmpValue), (tmpState), (textFragment)[12], 0x655b59c3, 6);                                         \\\n        MD5_FUNC_I((tmpValue), (tmpState), (textFragment)[3], 0x8f0ccc92, 10);                                         \\\n        MD5_FUNC_I((tmpValue), (tmpState), (textFragment)[10], 0xffeff47d, 15);                                        \\\n        MD5_FUNC_I((tmpValue), (tmpState), (textFragment)[1], 0x85845dd1, 21);                                         \\\n        MD5_FUNC_I((tmpValue), (tmpState), (textFragment)[8], 0x6fa87e4f, 6);                                          \\\n        MD5_FUNC_I((tmpValue), (tmpState), (textFragment)[15], 0xfe2ce6e0, 10);                                        \\\n        MD5_FUNC_I((tmpValue), (tmpState), (textFragment)[6], 0xa3014314, 15);                                         \\\n        MD5_FUNC_I((tmpValue), (tmpState), (textFragment)[13], 0x4e0811a1, 21);                                        \\\n        MD5_FUNC_I((tmpValue), (tmpState), (textFragment)[4], 0xf7537e82, 6);                                          \\\n        MD5_FUNC_I((tmpValue), (tmpState), (textFragment)[11], 0xbd3af235, 10);                                        \\\n        MD5_FUNC_I((tmpValue), (tmpState), (textFragment)[2], 0x2ad7d2bb, 15);                                         \\\n        MD5_FUNC_I((tmpValue), (tmpState), (textFragment)[9], 0xeb86d391, 21);                                         \\\n    } while (0)"
        ],
        "types": {
            "": [],
            "MD5_CTX": "typedef struct TagMd5Ctx\n{\n    uint32_t aulState[4];\n    uint32_t aulCount[2];\n    uint8_t aucBuffer[64];\n    uint32_t uiPos;\n} MD5_CTX;"
        },
        "global_variables": {},
        "declarations": [
            "TagMd5Ctx"
        ],
        "functions": {
            "VOS_MD5CalcDigestOfBuff": "static void VOS_MD5CalcDigestOfBuff(MD5_CTX *context)\n{\n    uint32_t i;\n    uint32_t tmpValue;\n    uint32_t textFragment[16];\n    uint32_t tmpState[4];\n    uint8_t *tmpText = context->aucBuffer;\n    tmpState[0] = context->aulState[0];\n    tmpState[1] = context->aulState[1];\n    tmpState[2] = context->aulState[2];\n    tmpState[3] = context->aulState[3];\n    for (i = 0; i < 16; i += 4)\n    {\n        textFragment[i] = (uint32_t)(tmpText[0]) + ((uint32_t)(tmpText[1]) << 8) + ((uint32_t)(tmpText[2]) << 16) +\n                          ((uint32_t)(tmpText[3]) << 24);\n        textFragment[i + 1] = (uint32_t)(tmpText[4]) + ((uint32_t)(tmpText[5]) << 8) + ((uint32_t)(tmpText[6]) << 16) +\n                              ((uint32_t)(tmpText[7]) << 24);\n        textFragment[i + 2] = (uint32_t)(tmpText[8]) + ((uint32_t)(tmpText[9]) << 8) + ((uint32_t)(tmpText[10]) << 16) +\n                              ((uint32_t)(tmpText[11]) << 24);\n        textFragment[i + 3] = (uint32_t)(tmpText[12]) + ((uint32_t)(tmpText[13]) << 8) +\n                              ((uint32_t)(tmpText[14]) << 16) + ((uint32_t)(tmpText[15]) << 24);\n        tmpText += 16;\n    }\n    MD5_F_PROC(tmpValue, tmpState, textFragment);\n    MD5_G_PROC(tmpValue, tmpState, textFragment);\n    MD5_H_PROC(tmpValue, tmpState, textFragment);\n    MD5_I_PROC(tmpValue, tmpState, textFragment);\n    context->aulState[0] += tmpState[0];\n    context->aulState[1] += tmpState[1];\n    context->aulState[2] += tmpState[2];\n    context->aulState[3] += tmpState[3];\n}",
            "VOS_MD5PadBuff": "static bool VOS_MD5PadBuff(MD5_CTX *context)\n{\n    bool needAnotherBuff = (context->uiPos >= MD5_TEXT_IN_BUFFER_MAX);\n    context->aucBuffer[context->uiPos] = 0x80;\n    context->uiPos++;\n    if (needAnotherBuff)\n    {\n        while (context->uiPos < MD5_BUFFER_SIZE)\n        {\n            context->aucBuffer[context->uiPos] = 0;\n            context->uiPos++;\n        }\n    }\n    else\n    {\n        while (context->uiPos < MD5_TEXT_IN_BUFFER_MAX)\n        {\n            context->aucBuffer[context->uiPos] = 0;\n            context->uiPos++;\n        }\n        MD5_RECORD_MESSAGE_LEN(context);\n    }\n    return needAnotherBuff;\n}",
            "VOS_MD5Init": "void VOS_MD5Init(MD5_CTX *context)\n{\n    if (context == NULL)\n    {\n        return;\n    }\n    (void)memset_s(context, sizeof(MD5_CTX), 0, sizeof(MD5_CTX));\n    context->aulState[0] = 0x67452301;\n    context->aulState[1] = 0xefcdab89;\n    context->aulState[2] = 0x98badcfe;\n    context->aulState[3] = 0x10325476;\n}",
            "VOS_MD5Update": "void VOS_MD5Update(MD5_CTX *context, uint8_t *input, uint32_t inputLen)\n{\n    uint64_t totalInputBits;\n    uint32_t inputIndex = 0;\n    uint64_t inputBit;\n    uint32_t tmpPos;\n    uint8_t *contextBuffer = NULL;\n    if ((context == NULL) || ((input == NULL) && (inputLen != 0)))\n    {\n        return;\n    }\n    inputBit = (uint64_t)inputLen << 3;\n    totalInputBits = ((uint64_t)context->aulCount[1] << 32) + context->aulCount[0];\n    if ((MD5_INPUT_LEN_MAX - totalInputBits) < inputBit)\n    {\n        return;\n    }\n    totalInputBits += inputBit;\n    context->aulCount[0] = (uint32_t)totalInputBits;\n    context->aulCount[1] = (uint32_t)(totalInputBits >> 32);\n    tmpPos = context->uiPos;\n    contextBuffer = context->aucBuffer;\n    while (inputIndex < inputLen)\n    {\n        if (tmpPos < MD5_BUFFER_SIZE)\n        {\n            contextBuffer[tmpPos] = input[inputIndex];\n            ++inputIndex;\n            ++tmpPos;\n            continue;\n        }\n        VOS_MD5CalcDigestOfBuff(context);\n        tmpPos = 0;\n    }\n    if (tmpPos == MD5_BUFFER_SIZE)\n    {\n        VOS_MD5CalcDigestOfBuff(context);\n        tmpPos = 0;\n    }\n    context->uiPos = tmpPos;\n    return;\n}",
            "VOS_MD5FinalEx": "void VOS_MD5FinalEx(uint8_t digest[], uint32_t bufLen, MD5_CTX *context)\n{\n    bool needAnotherBuff = 0;\n    if ((digest == NULL) || (context == NULL) || (bufLen < MD5_DIGEST_LEN))\n    {\n        return;\n    }\n    needAnotherBuff = VOS_MD5PadBuff(context);\n    VOS_MD5CalcDigestOfBuff(context);\n    if (needAnotherBuff)\n    {\n        context->uiPos = 0;\n        while (context->uiPos < MD5_TEXT_IN_BUFFER_MAX)\n        {\n            context->aucBuffer[context->uiPos] = 0;\n            context->uiPos++;\n        }\n        MD5_RECORD_MESSAGE_LEN(context);\n        VOS_MD5CalcDigestOfBuff(context);\n    }\n    MD5_COMPOSE_DIGEST(digest, context->aulState);\n    (void)memset_s(context, sizeof(MD5_CTX), 0, sizeof(MD5_CTX));\n}",
            "VOS_MD5Final": "void VOS_MD5Final(uint8_t digest[16], MD5_CTX *context)\n{\n    VOS_MD5FinalEx(digest, MD5_DIGEST_LEN, context);\n}",
            "VOS_MD5CalcEx": "void VOS_MD5CalcEx(uint8_t *output, uint32_t outputLen, const uint8_t *input, uint32_t inputLen)\n{\n    MD5_CTX context;\n    if (outputLen < MD5_DIGEST_LEN)\n    {\n        return;\n    }\n    VOS_MD5Init(&context);\n    VOS_MD5Update(&context, (uint8_t *)(uintptr_t)input, inputLen);\n    VOS_MD5FinalEx(output, outputLen, &context);\n}",
            "VOS_MD5Calc": "void VOS_MD5Calc(uint8_t *output, uint8_t *input, uint32_t inputLen)\n{\n    VOS_MD5CalcEx(output, MD5_DIGEST_LEN, input, inputLen);\n}"
        }
    }
}